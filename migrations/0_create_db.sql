CREATE DATABASE AKSA;

CREATE TABLE USERS (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  email TEXT NOT NULL UNIQUE,
  password TEXT NOT NULL
); 
-- Files are storing in external storage
CREATE TABLE FILE (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  link TEXT NOT NULL     
,  user_id int REFERENCES USERS (id) ON UPDATE CASCADE ON DELETE CASCADE 
);

CREATE TABLE BUILDGROUP (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name CHAR(255) NOT NULL
);

CREATE TABLE BUILD (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name CHAR(255) NOT NULL,
  deploy_script  TEXT,
  run_script  TEXT,
  buildgroup_id INT REFERENCES BUILDGROUP (id) ON UPDATE CASCADE ON DELETE SET NULL,  
  user_id int REFERENCES USERS (id) ON UPDATE CASCADE ON DELETE CASCADE 
);


-- Many-to-many Files-Builds
CREATE TABLE FILE_TO_BUILD (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  build_id  int REFERENCES BUILD (id) ON UPDATE CASCADE ON DELETE CASCADE, 
  file_id int REFERENCES FILE (id) ON UPDATE CASCADE ON DELETE CASCADE,  
  user_id int REFERENCES USERS (id) ON UPDATE CASCADE ON DELETE CASCADE 
);

CREATE TABLE BUILD_TO_BUILDGROUP (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  build_id int REFERENCES BUILD (id) ON UPDATE CASCADE ON DELETE CASCADE, 
  user_id int REFERENCES USERS (id) ON UPDATE CASCADE ON DELETE CASCADE,
  buildgroup_id int REFERENCES BUILDGROUP (id) ON UPDATE CASCADE ON DELETE CASCADE
);


--- AGENT creation algo:
  -- If root user, create new user
  -- Generate private key for AKSA
  -- Restrict acces from root account

CREATE TABLE AGENT (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  addres CHAR(255) NOT NULL,
  user CHAR(255) NOT NULL,
  pub_keys TEXT,  
  private_key TEXT, -- Only internal use
  password CHAR(255) NOT NULL
  user_id int REFERENCES USERS (id) ON UPDATE CASCADE ON DELETE CASCADE 
);


CREATE TABLE TASK (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY;
  STATUS int NULL,
  agent_id int REFERENCES AGENT (id) ON UPDATE CASCADE ON DELETE CASCADE,
  build_id int REFERENCES BUILD (id) ON UPDATE CASCADE ON DELETE CASCADE,
  logs_file int REFERENCES FILE (id) ON UPDATE CASCADE ON DELETE SET NULL,
  user_id int REFERENCES USERS (id) ON UPDATE CASCADE ON DELETE CASCADE 
);
